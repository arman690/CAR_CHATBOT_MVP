# ðŸš€ Azure Deployment Guide

## Quick Commands to Update Your Project

### 1. Replace Files with English Versions

```bash
# Replace main files with English versions
cp /path/to/new/static/index.html static/index.html
cp /path/to/new/services/ai_service.py services/ai_service.py
cp /path/to/new/database/sample_data.py database/sample_data.py
cp /path/to/new/README.md README.md
```

### 2. Create Environment File

```bash
# Create production .env file
cat > .env << EOF
AZURE_OPENAI_API_KEY=*****
AZURE_OPENAI_ENDPOINT=https://testmvp.openai.azure.com/
AZURE_OPENAI_API_VERSION=2024-12-01-preview
AZURE_DEPLOYMENT_NAME=gpt-4.1
DEBUG=False
ENVIRONMENT=production
EOF
```

### 3. Test Locally in English

```bash
# Test the English version
python test_azure.py
uvicorn main:app --host 0.0.0.0 --port 8000
```

## Azure App Service Deployment

### Option 1: Azure CLI Deployment (Recommended)

```bash
# 1. Login to Azure
az login

# 2. Create resource group
az group create --name car-chatbot-rg --location "East US"

# 3. Create App Service plan
az appservice plan create \
  --name car-chatbot-plan \
  --resource-group car-chatbot-rg \
  --sku B1 \
  --is-linux

# 4. Create web app
az webapp create \
  --resource-group car-chatbot-rg \
  --plan car-chatbot-plan \
  --name car-chatbot-mvp-unique \
  --runtime "PYTHON|3.11"

# 5. Configure environment variables
az webapp config appsettings set \
  --resource-group car-chatbot-rg \
  --name car-chatbot-mvp-unique \
  --settings \
    AZURE_OPENAI_API_KEY=****\
    AZURE_OPENAI_ENDPOINT="https://testmvp.openai.azure.com/" \
    AZURE_OPENAI_API_VERSION="2024-12-01-preview" \
    AZURE_DEPLOYMENT_NAME="gpt-4.1" \
    SCM_DO_BUILD_DURING_DEPLOYMENT="true"

# 6. Deploy code from local Git
git init
git add .
git commit -m "Initial deployment"

az webapp deployment source config-local-git \
  --name car-chatbot-mvp-unique \
  --resource-group car-chatbot-rg

git remote add azure <git-clone-url-from-above-command>
git push azure main
```

### Option 2: GitHub Actions Deployment

```bash
# 1. Push to GitHub
git add .
git commit -m "English version ready for deployment"
git push origin main

# 2. In Azure Portal:
# - Go to App Service > Deployment Center
# - Select GitHub
# - Authorize and select repository
# - Configure build provider as GitHub Actions
```

### Option 3: Docker Container Deployment

```bash
# 1. Build Docker image
docker build -t car-chatbot-mvp .

# 2. Test locally
docker run -p 8000:8000 --env-file .env car-chatbot-mvp

# 3. Push to Azure Container Registry
az acr create --resource-group car-chatbot-rg --name carChatbotRegistry --sku Basic
az acr login --name carChatbotRegistry

docker tag car-chatbot-mvp carChatbotRegistry.azurecr.io/car-chatbot-mvp:v1
docker push carChatbotRegistry.azurecr.io/car-chatbot-mvp:v1

# 4. Deploy container to App Service
az webapp create \
  --resource-group car-chatbot-rg \
  --plan car-chatbot-plan \
  --name car-chatbot-container \
  --deployment-container-image-name carChatbotRegistry.azurecr.io/car-chatbot-mvp:v1
```

## Configuration for Production

### 1. Update main.py for Production

Add this to your main.py:

```python
import os
from fastapi.middleware.cors import CORSMiddleware

# Add CORS middleware for production
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://car-chatbot-mvp-unique.azurewebsites.net"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Health check endpoint for Azure
@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "ai_service": "connected" if ai_service.client else "limited",
        "database": "active",
        "environment": os.getenv("ENVIRONMENT", "development")
    }
```

### 2. Create startup.sh for Azure

```bash
cat > startup.sh << 'EOF'
#!/bin/bash
echo "Starting Car Chatbot MVP on Azure..."

# Install dependencies
pip install -r requirements.txt

# Initialize database
python -c "
from database.models import init_database
from database.sample_data import populate_sample_data
init_database()
populate_sample_data()
print('Database initialized')
"

# Start Gunicorn with proper configuration
gunicorn -w 4 -k uvicorn.workers.UvicornWorker main:app --bind 0.0.0.0:8000 --timeout 120
EOF

chmod +x startup.sh
```

### 3. Update requirements.txt for Production

```bash
cat > requirements.txt << 'EOF'
fastapi==0.104.1
uvicorn[standard]==0.24.0
openai==1.3.0
python-dotenv==1.0.0
pydantic==2.5.0
requests==2.31.0
gunicorn==21.2.0
EOF
```

## Monitoring and Maintenance

### 1. Enable Application Insights

```bash
# Create Application Insights
az monitor app-insights component create \
  --app car-chatbot-insights \
  --location eastus \
  --resource-group car-chatbot-rg

# Get instrumentation key
az monitor app-insights component show \
  --app car-chatbot-insights \
  --resource-group car-chatbot-rg \
  --query instrumentationKey
```

### 2. Configure Logging

Add to main.py:

```python
import logging
from azure.monitor.opentelemetry import configure_azure_monitor

# Configure Azure Monitor (optional)
if os.getenv("APPLICATIONINSIGHTS_CONNECTION_STRING"):
    configure_azure_monitor()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
```

### 3. Set up Alerts

```bash
# CPU usage alert
az monitor metrics alert create \
  --name "High CPU Usage" \
  --resource-group car-chatbot-rg \
  --target-resource-id "/subscriptions/{subscription-id}/resourceGroups/car-chatbot-rg/providers/Microsoft.Web/sites/car-chatbot-mvp-unique" \
  --condition "avg Percentage CPU > 80"
```

## Testing Production Deployment

### 1. Smoke Tests

```bash
# Test health endpoint
curl https://car-chatbot-mvp-unique.azurewebsites.net/health

# Test chat endpoint
curl -X POST https://car-chatbot-mvp-unique.azurewebsites.net/chat \
  -H "Content-Type: application/json" \
  -d '{"message": "Hello"}'

# Test cars endpoint
curl https://car-chatbot-mvp-unique.azurewebsites.net/cars
```

### 2. Load Testing

```bash
# Install Azure Load Testing CLI
pip install azure-cli-load-testing

# Run basic load test
az load test create \
  --name "car-chatbot-load-test" \
  --resource-group car-chatbot-rg \
  --test-plan test-plan.yaml
```

## Troubleshooting

### Common Issues:

1. **Azure OpenAI Connection Failed**
   ```bash
   # Check logs
   az webapp log tail --name car-chatbot-mvp-unique --resource-group car-chatbot-rg
   
   # Verify environment variables
   az webapp config appsettings list --name car-chatbot-mvp-unique --resource-group car-chatbot-rg
   ```

2. **Database Not Initialized**
   ```bash
   # SSH into container
   az webapp ssh --name car-chatbot-mvp-unique --resource-group car-chatbot-rg
   
   # Check database file
   ls -la cars.db
   ```

3. **Static Files Not Serving**
   ```bash
   # Check file structure
   az webapp deployment source show --name car-chatbot-mvp-unique --resource-group car-chatbot-rg
   ```

## Success! ðŸŽ‰

Your car chatbot should now be running on:
```
https://car-chatbot-mvp-unique.azurewebsites.net
```

The application will:
- âœ… Use Azure OpenAI for intelligent responses
- âœ… Serve English interface
- âœ… Handle car search and price inquiries
- âœ… Scale automatically based on demand
- âœ… Log errors and performance metrics
